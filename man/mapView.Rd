% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/mapView.R
\docType{methods}
\name{mapView}
\alias{mapView}
\alias{mapView,RasterBrick-method}
\alias{mapView,RasterStack-method}
\alias{mapView,Satellite-method}
\alias{mapView,SpatialLines-method}
\alias{mapView,SpatialLinesDataFrame-method}
\alias{mapView,SpatialPoints-method}
\alias{mapView,SpatialPointsDataFrame-method}
\alias{mapView,SpatialPolygons-method}
\alias{mapView,SpatialPolygonsDataFrame-method}
\alias{mapView,leaflet-method}
\title{view raster layers interactively}
\usage{
\S4method{mapView}{RasterLayer}(x, map = NULL, cols = envinmrPalette(7),
  na.color = "transparent", values = NULL, map.types = c("OpenStreetMap",
  "Esri.WorldImagery"), layer.opacity = 0.8, legend = TRUE,
  legend.opacity = 1, trim = TRUE, verbose = FALSE, ...)

\S4method{mapView}{RasterStack}(x, map = NULL, cols = envinmrPalette(7),
  na.color = "transparent", values = NULL, map.types = c("OpenStreetMap",
  "Esri.WorldImagery"), layer.opacity = 0.8, legend = TRUE,
  legend.opacity = 1, trim = TRUE, verbose = FALSE, ...)

\S4method{mapView}{RasterBrick}(x, map = NULL, cols = envinmrPalette(7),
  na.color = "transparent", values = NULL, map.types = c("OpenStreetMap",
  "Esri.WorldImagery"), layer.opacity = 0.8, legend = TRUE,
  legend.opacity = 1, trim = TRUE, verbose = FALSE, ...)

\S4method{mapView}{Satellite}(x, ...)

\S4method{mapView}{SpatialPointsDataFrame}(x, map = NULL, burst = FALSE,
  cols = envinmrPalette(7), na.color = "transparent", values = NULL,
  map.types = c("OpenStreetMap", "Esri.WorldImagery"), layer.opacity = 0.8,
  legend = TRUE, legend.opacity = 1, verbose = FALSE, ...)

\S4method{mapView}{SpatialPoints}(x, map = NULL, na.color = "transparent",
  map.types = c("OpenStreetMap", "Esri.WorldImagery"), layer.opacity = 0.8,
  verbose = FALSE, ...)

\S4method{mapView}{SpatialPolygonsDataFrame}(x, map = NULL, burst = FALSE,
  cols = envinmrPalette(7), na.color = "transparent", values = NULL,
  map.types = c("OpenStreetMap", "Esri.WorldImagery"), layer.opacity = 0.8,
  legend = TRUE, legend.opacity = 1, weight = 2, verbose = FALSE, ...)

\S4method{mapView}{SpatialPolygons}(x, map = NULL, na.color = "transparent",
  map.types = c("OpenStreetMap", "Esri.WorldImagery"), layer.opacity = 0.8,
  weight = 2, verbose = FALSE, ...)

\S4method{mapView}{SpatialLinesDataFrame}(x, map = NULL, burst = FALSE,
  cols = envinmrPalette(7), na.color = "transparent", values = NULL,
  map.types = c("OpenStreetMap", "Esri.WorldImagery"), layer.opacity = 0.8,
  legend = TRUE, legend.opacity = 1, weight = 2, verbose = FALSE, ...)

\S4method{mapView}{SpatialLines}(x, map = NULL, na.color = "transparent",
  map.types = c("OpenStreetMap", "Esri.WorldImagery"), layer.opacity = 0.8,
  weight = 2, verbose = FALSE, ...)

\S4method{mapView}{leaflet}(x, y)
}
\arguments{
\item{x}{a \code{\link{raster}}* object}

\item{cols}{color palette for the layers}

\item{na.color}{color for missing values}

\item{values}{a vector of values for the visualisation of the layers.
Per default these are calculated based on the supplied raster* object.}

\item{map.types}{character spcifications for the base maps.
see \url{http://leaflet-extras.github.io/leaflet-providers/preview/}
for available options.}

\item{layer.opacity}{opacity of the layers}

\item{legend}{should a legend be plotted}

\item{legend.opacity}{opacity of the legend}

\item{trim}{should the raster be trimmed in case there are NAs on the egdes}

\item{...}{additional arguments passed on to \code{\link{addLegend}}}

\item{burst}{whether to show all (TRUE) or only one (FALSE) layers}
}
\description{
this function produces an interactive GIS-like view of the specified
raster layers on top of the specified base maps.
}
\section{Methods (by class)}{
\itemize{
\item \code{RasterStack}: 

\item \code{RasterBrick}: 

\item \code{Satellite}: 

\item \code{SpatialPointsDataFrame}: 

\item \code{SpatialPoints}: 

\item \code{SpatialPolygonsDataFrame}: 

\item \code{SpatialPolygons}: 

\item \code{SpatialLinesDataFrame}: 

\item \code{SpatialLines}: 

\item \code{leaflet}: 
}}
\examples{
### raster data ###
data(meuse.grid)
coordinates(meuse.grid) = ~x+y
proj4string(meuse.grid) <- CRS("+init=epsg:28992")
gridded(meuse.grid) = TRUE
meuse_rst <- stack(meuse.grid)

m1 <- mapView(meuse_rst)
m1

m2 <- mapView(meuse_rst[[1]])
m2



### point vector data ###
## SpatialPointsDataFrame ##
data(meuse)
coordinates(meuse) <- ~x+y
proj4string(meuse) <- CRS("+init=epsg:28992")

# all layers of meuse
mapView(meuse, burst = TRUE)

# only one layer, all info in popups
mapView(meuse, burst = FALSE)

## SpatialPoints ##
meuse_pts <- as(meuse, "SpatialPoints")
mapView(meuse_pts)



### overlay vector on top of raster ###
m3 <- mapView(meuse, map = m2)
m3

m4 <- mapView(meuse, map = m2, burst = TRUE)
m4 # is the same as
m5 <- addLayer(meuse, m2, burst = TRUE)
m5



### polygon vector data ###
data("DEU_adm2")
m <- mapView(gadm, burst = FALSE)
m

## points on polygons ##
centres <- data.frame(coordinates(gadm))
names(centres) <- c("x", "y")
coordinates(centres) <- ~ x + y
projection(centres) <- projection(gadm)
addLayer(centres, m)



### lines vector data
data("atlStorms2005")
mapView(atlStorms2005, burst = FALSE)
mapView(atlStorms2005, burst = TRUE)
}
\author{
Tim Appelhans
}

